{"version":3,"sources":["DrumPad.js","data.js","App.js","registerServiceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleKeyPress","bind","assertThisInitialized","handleClick","document","addEventListener","removeEventListener","getElementById","text","play","onInstrumentChange","name","event","key","toLowerCase","react_default","a","createElement","className","id","onClick","onKeyPress","src","Component","data","content","App","nowPlaying","handleInstrumentChange","instrument","setState","_this2","listItems","map","item","src_DrumPad","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d7f8c904.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleClick() {\n    let audio = document.getElementById(this.props.text);\n    audio.play();\n    this.props.onInstrumentChange(this.props.name);\n  }\n\n  handleKeyPress(event) {\n    if (event.key === this.props.text.toLowerCase()) {\n      let audio = document.getElementById(this.props.text);\n      audio.play();\n      this.props.onInstrumentChange(this.props.name);\n    }\n  }\n\n  render() {\n    return (\n      <button \n        className=\"drum-pad\" \n        id={this.props.id} \n        onClick={this.handleClick}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.props.text}\n        <audio \n          src={this.props.src} \n          id={this.props.text}\n          className=\"clip\"\n        >\n        </audio>\n      </button>\n    );\n  }\n}\n\nexport default DrumPad;","export default {\n  content: [\n    {  \n      id: \"heater-1\",\n      text: \"Q\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n      name: \"Heater 01\"\n    },\n    {\n      id: \"heater-2\",\n      text: \"W\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n      name: \"Heater 02\"\n    },\n    {\n      id: \"heater-3\",\n      text: \"E\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n      name: \"Heater 03\"\n    },\n    {  \n      id: \"heater-4\",\n      text: \"A\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n      name: \"Heater 04\"\n    },\n    { \n      id: \"clap\",\n      text: \"S\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n      name: \"Clap\"\n    },\n    {\n      id: \"open-hh\",\n      text: \"D\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n      name: \"Open Hi-hat\"\n    },\n    { \n      id: \"kick-n-hat\",\n      text: \"Z\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n      name: \"Kick n Hat\"\n    },\n    {\n      id: \"kick\",\n      text: \"X\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n      name: \"Kick\"\n    },\n    {\n      id: \"closed-hh\",\n      text: \"C\",\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n      name: \"Closed Hi-hat\"\n    }\n  ]\n};\n","import React, { Component } from 'react';\nimport DrumPad from './DrumPad.js';\nimport data from './data.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nowPlaying: 'Nothing'\n    }\n    this.handleInstrumentChange = this.handleInstrumentChange.bind(this);\n  }\n\n  handleInstrumentChange(instrument) {\n    this.setState({nowPlaying: instrument})\n  }\n\n  render() {\n    const listItems = data.content.map(item => {\n      return (\n        <DrumPad\n          key={item.id}\n          id={item.id}\n          text={item.text}\n          src={item.src}\n          name={item.name}\n          onInstrumentChange={this.handleInstrumentChange}\n          >\n        </DrumPad>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <div id=\"drum-machine\">\n          <h1>808s</h1>\n          <div id=\"display\">\n            <em>{this.state.nowPlaying}</em>\n          </div>\n          <div className=\"drum-pad-area\">\n            {listItems}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}